package tsp;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;


/**
 * This heuristic sorts the arcs by increasing value and 
 * considers each arc in turn for insertion
 * An arc is inserted if and only if it does not create a subtour.
 * The method stops when a tour is obtained.
 */
public class DecreasingArcHeuristicTSP implements HeuristicTSP {

	/** TODO coder cette m√©thode */
	public double computeSolution(double[][] matrix, List<Integer> solution) {
		double value = 0.0;
		List<Arrete> edges = this.getSortedListOfEdges(matrix);
		
		
		
		return value;
	}

	private List<Arrete> getSortedListOfEdges(double[][] matrix) {
		
		List<Arrete> edges = new ArrayList<Arrete>();
		
		for (int i = 0; i < matrix.length; i++) {
			for (int j = 0; j < matrix[0].length; j++) {
				edges.add(new Arrete(matrix[i][j],i,j));
			}
		}
		
		Collections.sort(edges);
		
		return edges;
	}
}